apiVersion: v1
kind: Namespace
metadata:
  name: global-vc0
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vc-vcluster
  namespace: global-vc0
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vc-workload-vcluster
  namespace: global-vc0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vcluster
  namespace: global-vc0
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - services
  - pods
  - pods/attach
  - pods/portforward
  - pods/exec
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - patch
  - update
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - endpoints
  - events
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - delete
  - patch
  - update
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  - replicasets
  - deployments
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vc-vcluster-v-global-vc0
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - pods
  - nodes/proxy
  - nodes/metrics
  - nodes/stats
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vcluster
  namespace: global-vc0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vcluster
subjects:
- kind: ServiceAccount
  name: vc-vcluster
  namespace: global-vc0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vc-vcluster-v-global-vc0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vc-vcluster-v-global-vc0
subjects:
- kind: ServiceAccount
  name: vc-vcluster
  namespace: global-vc0
---
apiVersion: v1
data:
  coredns.yaml: |-
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: coredns
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:coredns
    rules:
      - apiGroups:
          - ""
        resources:
          - endpoints
          - services
          - pods
          - namespaces
        verbs:
          - list
          - watch
      - apiGroups:
          - discovery.k8s.io
        resources:
          - endpointslices
        verbs:
          - list
          - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:coredns
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:coredns
    subjects:
      - kind: ServiceAccount
        name: coredns
        namespace: kube-system
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: coredns
      namespace: kube-system
    data:
      Corefile: |
        .:1053 {
            {{.LOG_IN_DEBUG}}
            errors
            health
            ready
            kubernetes cluster.local in-addr.arpa ip6.arpa {
              pods insecure
              fallthrough in-addr.arpa ip6.arpa
            }
            hosts /etc/coredns/NodeHosts {
              ttl 60
              reload 15s
              fallthrough
            }
            prometheus :9153
            forward . /etc/resolv.conf
            cache 30
            loop
            reload
            loadbalance
        }

        import /etc/coredns/custom/*.server
      NodeHosts: ""
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: coredns
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/name: "CoreDNS"
    spec:
      replicas: 1
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
      selector:
        matchLabels:
          k8s-app: kube-dns
      template:
        metadata:
          labels:
            k8s-app: kube-dns
        spec:
          priorityClassName: "system-cluster-critical"
          serviceAccountName: coredns
          nodeSelector:
            kubernetes.io/os: linux
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  k8s-app: kube-dns
          containers:
            - name: coredns
              image: {{.IMAGE}}
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  cpu: 1000m
                  memory: 170Mi
                requests:
                  cpu: 3m
                  memory: 16Mi
              args: [ "-conf", "/etc/coredns/Corefile" ]
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/coredns
                  readOnly: true
                - name: custom-config-volume
                  mountPath: /etc/coredns/custom
                  readOnly: true
              ports:
                - containerPort: 1053
                  name: dns
                  protocol: UDP
                - containerPort: 1053
                  name: dns-tcp
                  protocol: TCP
                - containerPort: 9153
                  name: metrics
                  protocol: TCP
              securityContext:
                runAsUser: {{.RUN_AS_USER}}
                runAsNonRoot: {{.RUN_AS_NON_ROOT}}
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: /ready
                  port: 8181
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 2
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
          dnsPolicy: Default
          volumes:
            - name: config-volume
              configMap:
                name: coredns
                items:
                  - key: Corefile
                    path: Corefile
                  - key: NodeHosts
                    path: NodeHosts
            - name: custom-config-volume
              configMap:
                name: coredns-custom
                optional: true
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: kube-dns
      namespace: kube-system
      annotations:
        prometheus.io/port: "9153"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        kubernetes.io/name: "CoreDNS"
    spec:
      selector:
        k8s-app: kube-dns
      type: ClusterIP
      ports:
        - name: dns
          port: 53
          targetPort: 1053
          protocol: UDP
        - name: dns-tcp
          port: 53
          targetPort: 1053
          protocol: TCP
        - name: metrics
          port: 9153
          protocol: TCP
kind: ConfigMap
metadata:
  name: vcluster-coredns
  namespace: global-vc0
---
apiVersion: v1
data:
  manifests: '---'
kind: ConfigMap
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vcluster-init-manifests
  namespace: global-vc0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vcluster
  namespace: global-vc0
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: vcluster
    release: vcluster
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vcluster-headless
  namespace: global-vc0
spec:
  clusterIP: None
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: vcluster
    release: vcluster
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vcluster
    chart: vcluster-0.12.3
    heritage: Helm
    release: vcluster
  name: vcluster
  namespace: global-vc0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vcluster
      release: vcluster
  serviceName: vcluster-headless
  template:
    metadata:
      labels:
        app: vcluster
        release: vcluster
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: env
                operator: In
                values:
                - global
      containers:
      - args:
        - -c
        - /bin/k3s server --write-kubeconfig=/data/k3s-config/kube-config.yaml --data-dir=/data
          --disable=traefik,servicelb,metrics-server,local-storage,coredns --disable-network-policy
          --disable-agent --disable-cloud-controller --flannel-backend=none --disable-scheduler
          --kube-controller-manager-arg=controllers=*,-nodeipam,-nodelifecycle,-persistentvolume-binder,-attachdetach,-persistentvolume-expander,-cloud-node-lifecycle,-ttl
          --kube-apiserver-arg=endpoint-reconciler-type=none --service-cidr=$(SERVICE_CIDR)
          && true
        command:
        - /bin/sh
        env:
        - name: SERVICE_CIDR
          valueFrom:
            configMapKeyRef:
              key: cidr
              name: vc-cidr-vcluster
        image: rancher/k3s:v1.23.13-k3s1
        name: vcluster
        resources:
          limits:
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /etc/rancher
          name: config
        - mountPath: /data
          name: data
      - args:
        - --name=vcluster
        - --service-account=vc-workload-vcluster
        - --kube-config-context-name=my-vcluster
        - --sync=nodes
        - --node-selector=env=global
        - --tls-san=vcluster.global-vc0.svc.cluster.local
        - --enforce-toleration=env=global-vc0:NoSchedule
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: VCLUSTER_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: loftsh/vcluster:0.12.3
        livenessProbe:
          failureThreshold: 60
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 2
        name: syncer
        readinessProbe:
          failureThreshold: 60
          httpGet:
            path: /readyz
            port: 8443
            scheme: HTTPS
          periodSeconds: 2
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 20m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /manifests/coredns
          name: coredns
          readOnly: true
        - mountPath: /data
          name: data
          readOnly: true
      nodeSelector: {}
      serviceAccountName: vc-vcluster
      terminationGracePeriodSeconds: 10
      tolerations:
      - key: env
        operator: Equal
        value: global
      volumes:
      - emptyDir: {}
        name: config
      - configMap:
          name: vcluster-coredns
        name: coredns
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
      storageClassName: null
