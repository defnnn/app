apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: kourier-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: net-kourier
  namespace: knative-serving
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: net-kourier
  namespace: knative-serving
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  - endpoints
  - services
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
  - patch
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - ingresses/status
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: net-kourier
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: net-kourier
subjects:
- kind: ServiceAccount
  name: net-kourier
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # Specifies whether requests reaching the Kourier gateway
    # in the context of services should be logged. Readiness
    # probes etc. must be configured via the bootstrap config.
    enable-service-access-logging: "true"

    # Specifies whether to use proxy-protocol in order to safely
    # transport connection information such as a client's address
    # across multiple layers of TCP proxies.
    # NOTE THAT THIS IS AN EXPERIMENTAL / ALPHA FEATURE
    enable-proxy-protocol: "false"

    # The server certificates to serve the internal TLS traffic for Kourier Gateway.
    # It is specified by the secret name in controller namespace, which has
    # the "tls.crt" and "tls.key" data field.
    # Use an empty value to disable the feature (default).
    #
    # NOTE: This flag is in an alpha state and is mostly here to enable internal testing
    #       for now. Use with caution.
    cluster-cert-secret: ""

    # Specifies the amount of time that Kourier waits for the incoming requests.
    # The default, 0s, imposes no timeout at all.
    stream-idle-timeout: "0s"

    # Control the desired level of incoming traffic isolation.
    #
    # When set to an empty value (default), all incoming traffic flows through
    # a shared ingress and listeners.
    #
    # When set to "port", incoming traffic is isolated by using different
    # listener ports.
    #
    # NOTE: This flag is in an alpha state.
    traffic-isolation: ""
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: config-kourier
  namespace: knative-serving
---
apiVersion: v1
data:
  envoy-bootstrap.yaml: |
    dynamic_resources:
      ads_config:
        transport_api_version: V3
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: xds_cluster}
      cds_config:
        resource_api_version: V3
        ads: {}
      lds_config:
        resource_api_version: V3
        ads: {}
    node:
      cluster: kourier-knative
      id: 3scale-kourier-gateway
    static_resources:
      listeners:
        - name: stats_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9000
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: stats_server
                    http_filters:
                      - name: envoy.filters.http.router
                    route_config:
                      virtual_hosts:
                        - name: admin_interface
                          domains:
                            - "*"
                          routes:
                            - match:
                                safe_regex:
                                  google_re2: {}
                                  regex: '/(certs|stats(/prometheus)?|server_info|clusters|listeners|ready)?'
                                headers:
                                  - name: ':method'
                                    exact_match: GET
                              route:
                                cluster: service_stats
      clusters:
        - name: service_stats
          connect_timeout: 0.250s
          type: static
          load_assignment:
            cluster_name: service_stats
            endpoints:
              lb_endpoints:
                endpoint:
                  address:
                    pipe:
                      path: /tmp/envoy.admin
        - name: xds_cluster
          connect_timeout: 1s
          type: strict_dns
          load_assignment:
            cluster_name: xds_cluster
            endpoints:
              lb_endpoints:
                endpoint:
                  address:
                    socket_address:
                      address: "net-kourier-controller.knative-serving"
                      port_value: 18000
          http2_protocol_options: {}
          type: STRICT_DNS
    admin:
      access_log_path: "/dev/stdout"
      address:
        pipe:
          path: /tmp/envoy.admin
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: kourier-bootstrap
  namespace: kourier-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: net-kourier-controller
  namespace: knative-serving
spec:
  ports:
  - name: grpc-xds
    port: 18000
    protocol: TCP
    targetPort: 18000
  selector:
    app: net-kourier-controller
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: kourier
  namespace: kourier-system
spec:
  ports:
  - name: http2
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: 3scale-kourier-gateway
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: kourier-internal
  namespace: kourier-system
spec:
  ports:
  - name: http2
    port: 80
    protocol: TCP
    targetPort: 8081
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8444
  selector:
    app: 3scale-kourier-gateway
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: net-kourier-controller
  namespace: knative-serving
spec:
  replicas: 1
  selector:
    matchLabels:
      app: net-kourier-controller
  template:
    metadata:
      labels:
        app: net-kourier-controller
    spec:
      containers:
      - env:
        - name: CERTS_SECRET_NAMESPACE
          value: ""
        - name: CERTS_SECRET_NAME
          value: ""
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: METRICS_DOMAIN
          value: knative.dev/samples
        - name: KOURIER_GATEWAY_NAMESPACE
          value: kourier-system
        - name: ENABLE_SECRET_INFORMER_FILTERING_BY_CERT_UID
          value: "false"
        image: gcr.io/knative-releases/knative.dev/net-kourier/cmd/kourier@sha256:74e4a5479718d2ba44e3b13903643ce0e6d82b812ea76b75025e511618145ad7
        name: controller
        ports:
        - containerPort: 18000
          name: http2-xds
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /ko-app/kourier
            - -probe-addr=:18000
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      restartPolicy: Always
      serviceAccountName: net-kourier
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: net-kourier
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: 1.7.0
    networking.knative.dev/ingress-provider: kourier
  name: 3scale-kourier-gateway
  namespace: kourier-system
spec:
  selector:
    matchLabels:
      app: 3scale-kourier-gateway
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        networking.knative.dev/poke: v0.26
      labels:
        app: 3scale-kourier-gateway
    spec:
      containers:
      - args:
        - --base-id 1
        - -c /tmp/config/envoy-bootstrap.yaml
        - --log-level info
        command:
        - /usr/local/bin/envoy
        image: docker.io/envoyproxy/envoy:v1.20-latest
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - curl -X POST --unix /tmp/envoy.admin http://localhost/healthcheck/fail;
                sleep 15
        name: kourier-gateway
        ports:
        - containerPort: 8080
          name: http2-external
          protocol: TCP
        - containerPort: 8081
          name: http2-internal
          protocol: TCP
        - containerPort: 8443
          name: https-external
          protocol: TCP
        - containerPort: 8090
          name: http-probe
          protocol: TCP
        - containerPort: 9443
          name: https-probe
          protocol: TCP
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: Host
              value: internalkourier
            path: /ready
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        volumeMounts:
        - mountPath: /tmp/config
          name: config-volume
      restartPolicy: Always
      volumes:
      - configMap:
          name: kourier-bootstrap
        name: config-volume
